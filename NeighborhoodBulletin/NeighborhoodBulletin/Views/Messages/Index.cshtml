@model NeighborhoodBulletin.Models.MessageIndexViewModel

@{
    ViewData["Title"] = $"{@Model.Neighbor.ZipCode}";
}

<!DOCTYPE html>
<html>
<head>
    <title>Simple Map</title>
    <meta name="viewport" content="initial-scale=1.0">
    <meta charset="utf-8">
    <style>
         /* Always set the map height explicitly to define the size of the div
        * element that contains the map. */
         #map {
             height: 100%;
         }
         /* Optional: Makes the sample page fill the window. */
         html, body {
             height: 100%;
             margin: 0;
             padding: 0;
         }
    </style>
</head>
<body>
    <div id="map" style="height:400px; width:100%;"></div>
    <script>
        var map;
        function initMap() {
            map = new google.maps.Map(document.getElementById('map'), {
                center: { lat: @Model.Neighbor.Latitude, lng: @Model.Neighbor.Longitude },
                zoom: 12
            });
        //    // Create an array of alphabetical characters used to label the markers.
        //    var labels = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';

        //    // Add some markers to the map.
        //    // Note: The code uses the JavaScript Array.prototype.map() method to
        //    // create an array of markers based on a given "locations" array.
        //    // The map() method here has nothing to do with the Google Maps API.
        //    var markers = locations.map(function(location, i) {
        //      return new google.maps.Marker({
        //        position: location,
        //        label: labels[i % labels.length]
        //      });
        //    });

        //    // Add a marker clusterer to manage the markers.
        //    var markerCluster = new MarkerClusterer(map, markers,
        //        {imagePath: 'https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/m'});
        }



        //function geocodeAddress(geocoder, resultsMap)













    </script>

    <script src="@Model.Url" async defer></script>

    <h2 id="header">Messages in your Zip Code</h2>
    <p>
        <a asp-action="Create">Create New</a>
    </p>
    <table class="table">
        <thead>
            <tr>
                @*<th>
                        @Html.DisplayNameFor(model => model.Neighbor)
                    </th>*@
                <th>
                    @Html.DisplayNameFor(model => model.Message.Username)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Message.Text)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Message.DateTime)
                </th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model.Messages)
            {
                <tr>
                    @*<td>
                            @Html.DisplayFor(modelItem => item.Neighbor.Id)
                        </td>*@
                    <td>
                        @Html.DisplayFor(modelItem => item.Username)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Text)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.DateTime)
                    </td>
                    @if (item.NeighborId == Model.Neighbor.Id)
                    {
                        <td>
                            <a asp-action="Edit" asp-route-id="@item.Id">Edit</a> |
                            <a asp-action="Details" asp-route-id="@item.Id">Details</a> |
                            <a asp-action="Delete" asp-route-id="@item.Id">Delete</a>
                        </td>

                    }
                </tr>
            }
        </tbody>
    </table>

    <h2 id="header">Updates in your Zip Code</h2>

    <table class="table">
        <thead>
            <tr>
                @*<th>
                        @Html.DisplayNameFor(model => model.Neighbor)
                    </th>*@
                <th>
                    @Html.DisplayNameFor(model => model.Update.BusinessName)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Update.Text)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Update.DateTime)
                </th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model.Updates)
            {
                <tr>
                    @*<td>
                            @Html.DisplayFor(modelItem => item.Neighbor.Id)
                        </td>*@
                    <td>
                        @Html.DisplayFor(modelItem => item.BusinessName)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Text)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.DateTime)
                    </td>
                    @*@if (item.ShopOwnerId == Model.Neighbor.Id)
                    {
                        <td>
                            <a asp-action="Edit" asp-route-id="@item.Id">Edit</a> |
                            <a asp-action="Details" asp-route-id="@item.Id">Details</a> |
                            <a asp-action="Delete" asp-route-id="@item.Id">Delete</a>
                        </td>
                    }*@

                </tr>
            }
        </tbody>
    </table>
</body>
</html>

