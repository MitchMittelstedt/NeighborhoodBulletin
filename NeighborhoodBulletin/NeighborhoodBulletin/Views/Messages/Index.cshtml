@model NeighborhoodBulletin.Models.MessageIndexViewModel

@{
    ViewData["Title"] = $"{@Model.Neighbor.ZipCode}";
}

<!DOCTYPE html>
<html>
<head>
    <title>Simple Map</title>
    <meta name="viewport" content="initial-scale=1.0">
    <meta charset="utf-8">
    <style>
        /* Always set the map height explicitly to define the size of the div
        * element that contains the map. */
        #map {
            height: 100%;
        }
        /* Optional: Makes the sample page fill the window. */
        html, body {
            height: 100%;
            margin: 0;
            padding: 0;
        }
    </style>
</head>
<body>
    <br>
    <br>
    <div id="map" style="height:400px; width:100%;"></div>





    <h2 id="header">local posts</h2>

    <p>

        <a asp-action="Create">Create New</a>

    </p>

    @foreach (var item in Model.Messages)
    {
        <table class="table">
            @*<thead>
                </thead>*@
            <tbody>
                <tr>
                    @*<td>
                            @Html.DisplayFor(modelItem => item.ShopOwner.Id)
                        </td>*@

                    <td class="date-and-zip">
                        @Html.DisplayFor(modelItem => item.Username) @if (item.NeighborZipCode != Model.Neighbor.ZipCode) { Write("(nonlocal)"); } else { Write("(local)"); } <br /> posted in @Html.DisplayFor(modelItem => item.ZipCode) <br /> on @Html.DisplayFor(modelItem => item.DateTime)
                    </td>
                    <td class="text-content">
                        @Html.DisplayFor(modelItem => item.Text)
                    </td>
                    @*<td class="edit-details-delete">
                        <a asp-action="Edit" asp-route-id="@item.Id">edit</a> |
                        <a asp-action="Details" asp-route-id="@item.Id">details</a> |
                        <a asp-action="Delete" asp-route-id="@item.Id">delete</a>
                        </td>*@
                    @if (item.NeighborId == Model.Neighbor.Id)
                    {
                        <td class="edit-details-delete">
                            <a asp-action="Edit" asp-route-id="@item.Id">edit</a> |
                            <a asp-action="Details" asp-route-id="@item.Id">details</a> |
                            <a asp-action="Delete" asp-route-id="@item.Id">delete</a>
                        </td>

                    }

                </tr>
            </tbody>
        </table>
    }


    <h2 id="header">nonlocal posts</h2>

    @foreach (var item in Model.MessagesOutsideZipCode)
    {
        <table class="table">
            @*<thead>
                </thead>*@
            <tbody>
                <tr>
                    @*<td>
                            @Html.DisplayFor(modelItem => item.ShopOwner.Id)
                        </td>*@

                    <td class="date-and-zip">
                        @Html.DisplayFor(modelItem => item.Username) @if (item.NeighborZipCode != Model.Neighbor.ZipCode) { Write("(nonlocal)"); } else { Write("(local)"); } <br /> posted in @Html.DisplayFor(modelItem => item.ZipCode) <br /> on @Html.DisplayFor(modelItem => item.DateTime)
                    </td>
                    <td class="text-content">
                        @Html.DisplayFor(modelItem => item.Text)
                    </td>
                    @*<td class="edit-details-delete">
                        <a asp-action="Edit" asp-route-id="@item.Id">edit</a> |
                        <a asp-action="Details" asp-route-id="@item.Id">details</a> |
                        <a asp-action="Delete" asp-route-id="@item.Id">delete</a>
                        </td>*@
                    @if (item.NeighborId == Model.Neighbor.Id)
                    {
                        <td class="edit-details-delete">
                            <a asp-action="Edit" asp-route-id="@item.Id">edit</a> |
                            <a asp-action="Details" asp-route-id="@item.Id">details</a> |
                            <a asp-action="Delete" asp-route-id="@item.Id">delete</a>
                        </td>

                    }

                </tr>
            </tbody>
        </table>
    }


    <h2 id="header">local business updates</h2>

    @foreach (var item in Model.Updates)
    {
        <table class="table">
            @*<thead>
                </thead>*@
            <tbody>
                <tr>
                    @*<td>
                            @Html.DisplayFor(modelItem => item.ShopOwner.Id)
                        </td>*@

                    <td class="date-and-zip">
                        @Html.DisplayFor(modelItem => item.BusinessName) <br />posted in @Html.DisplayFor(modelItem => item.ZipCode) <br /> on @Html.DisplayFor(modelItem => item.StartDate) <br /> till @Html.DisplayFor(modelItem => item.EndDate)
                    </td>
                    <td class="text-content">
                        @Html.DisplayFor(modelItem => item.Text)
                    </td>
                    @*<td class="edit-details-delete">
                            <a asp-action="Edit" asp-route-id="@item.Id">edit</a> |
                            <a asp-action="Details" asp-route-id="@item.Id">details</a> |
                            <a asp-action="Delete" asp-route-id="@item.Id">delete</a>
                        </td>*@

                </tr>
            </tbody>
        </table>
    }


    <h2 id="header">nonlocal business updates</h2>

    @foreach (var item in Model.UpdatesOutsideZipCode)
    {
        <table class="table">
            @*<thead>
                </thead>*@
            <tbody>
                <tr>
                    @*<td>
                            @Html.DisplayFor(modelItem => item.ShopOwner.Id)
                        </td>*@

                    <td class="date-and-zip">
                        @Html.DisplayFor(modelItem => item.BusinessName) <br />posted in @Html.DisplayFor(modelItem => item.ZipCode) <br /> on @Html.DisplayFor(modelItem => item.StartDate) <br /> till @Html.DisplayFor(modelItem => item.EndDate)
                    </td>
                    <td class="text-content">
                        @Html.DisplayFor(modelItem => item.Text)
                    </td>
                    @*<td class="edit-details-delete">
                            <a asp-action="Edit" asp-route-id="@item.Id">edit</a> |
                            <a asp-action="Details" asp-route-id="@item.Id">details</a> |
                            <a asp-action="Delete" asp-route-id="@item.Id">delete</a>
                        </td>*@

                </tr>
            </tbody>
        </table>
    }
    @if(Model.UpdatesOutsideZipCode.Count == 0)
    {
        Write("no nonlocal updates to display");
    }

    <script type="text/javascript">

        let map;
        // Standard google maps function
        function initMap() {
            var myLatlng = new google.maps.LatLng(@Model.Neighbor.Latitude, @Model.Neighbor.Longitude);
            var myOptions = {
                zoom: 12,
                center: myLatlng,
            }
            map = new google.maps.Map(document.getElementById('map'), myOptions);
            ShopOwnerMarkers();
        }
        @*var labels = [];
        var labelIndex = 0;

        @foreach(var item in Model.ShopOwners)
        {
            <text>
            var businessName = @item.BusinessName;
            labels.push(businessName);
            </text>
        }*@


        // Function for adding a marker to the page.
        function addMarker(location, label) {
            marker = new google.maps.Marker({
                position: location,
                label: label,
                map: map
            });
        }

        function ShopOwnerMarkers()
        {
            @foreach (var item in Model.ShopOwners)
            {
                <text>
                var shopOwnerLocation = new google.maps.LatLng(@item.Latitude, @item.Longitude);
                var businessName = "@item.BusinessName";
                addMarker(shopOwnerLocation, businessName);
                </text>
            }
        }

        //shopOwners.forEach(element =>
        //{
        //    var latitude = element.Latitude;
        //    var longitude = element.Longitude;
        //    shopOwnerlocation = new google.maps.LatLng(latitude, longitude);
        //    addMarker(shopOwnerLocation);
        //});
        @*function initMap() {
            map = new google.maps.Map(document.getElementById('map'), {
                center: { lat: @Model.Neighbor.Latitude, lng: @Model.Neighbor.Longitude },
                zoom: 12
            });
        };*@
        //function addMarker(location, map)
        //{

        //}
        //var latLng = new google.maps.LatLng(s.lat, s.lng);
        //var mapOptions =
        //var marker = new google.maps.Marker({
        //    position: latLng,
        //    map: map,
        //    title: 'Subscriptions in your Zip Code'
        //marker.SetMap(map);



        //}

    </script>
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDDkLcqZqMPi_tWPvqGyBKBCBfuOKC8gvw&callback=initMap" async defer></script>
</body>
</html>

